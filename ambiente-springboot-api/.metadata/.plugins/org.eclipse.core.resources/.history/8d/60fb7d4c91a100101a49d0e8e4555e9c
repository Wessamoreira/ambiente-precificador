package com.precificapro.service;

import com.precificapro.domain.model.User;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.web.reactive.function.client.WebClient;
import reactor.core.publisher.Mono;

import java.util.Map;
import java.util.List;

@Service
public class AiService {

    private final WebClient webClient;
    private final String geminiApiKey;

    @Autowired
    private DashboardService dashboardService; // Reutilizaremos nosso serviço de métricas

    public AiService(WebClient.Builder webClientBuilder, @Value("${gemini.api.key}") String geminiApiKey) {
        this.webClient = webClientBuilder.baseUrl("https://generativelanguage.googleapis.com").build();
        this.geminiApiKey = geminiApiKey;
    }

    public Mono<String> askGemini(String question, User owner) {
        // 1. Coleta os dados do negócio do usuário para dar contexto à IA
        var metrics = dashboardService.getMetrics(owner);
        
        // 2. Monta um prompt poderoso e contextualizado
        String context = String.format(
            "Dados atuais do negócio: Faturamento Total: R$%.2f, Lucro Líquido Total: R$%.2f, Produtos Cadastrados: %d, Clientes: %d.",
            metrics.totalRevenue(), metrics.totalNetProfit(), metrics.productCount(), metrics.customerCount()
        );

        String prompt = "Você é o PrecificaPro, um assistente financeiro especialista em pequenos negócios. " +
                        "Seja conciso, amigável e direto. Use os dados fornecidos para basear sua resposta. " +
                        "Contexto do negócio: " + context + " Pergunta do usuário: '" + question + "'";

        // 3. Prepara a requisição para a API do Gemini
        var requestBody = Map.of(
            "contents", List.of(
                Map.of("parts", List.of(Map.of("text", prompt)))
            )
        );

        // 4. Faz a chamada para a API e processa a resposta
        return this.webClient.post()
                .uri(uriBuilder -> uriBuilder
                        .path("/v1beta/models/gemini-1.5-flash-latest:generateContent")
                        .queryParam("key", this.geminiApiKey)
                        .build())
                .bodyValue(requestBody)
                .retrieve()
                .bodyToMono(Map.class) // A resposta vem como um JSON (Map)
                .map(response -> {
                    // Navega na estrutura da resposta do Gemini para pegar o texto
                    try {
                        List<Map> candidates = (List<Map>) response.get("candidates");
                        Map content = (Map) candidates.get(0).get("content");
                        List<Map> parts = (List<Map>) content.get("parts");
                        return (String) parts.get(0).get("text");
                    } catch (Exception e) {
                        return "Desculpe, não consegui processar a resposta da IA.";
                    }
                });
    }
}