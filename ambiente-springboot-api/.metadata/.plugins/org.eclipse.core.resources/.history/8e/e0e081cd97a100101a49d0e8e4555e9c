package com.precificapro.service;

import com.precificapro.domain.model.User;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.web.reactive.function.client.WebClient;
import java.util.List;
import java.util.Map;

@Service
public class AiService {

    private final WebClient webClient;
    private final String geminiApiKey;

    @Autowired
    private DashboardService dashboardService;

    // 1. Voltamos para a URL base original
    public AiService(WebClient.Builder webClientBuilder, @Value("${gemini.api.key}") String geminiApiKey) {
        this.webClient = webClientBuilder.baseUrl("https://generativelanguage.googleapis.com").build();
        this.geminiApiKey = geminiApiKey;
    }

    public String askGemini(String question, User owner) {
        var metrics = dashboardService.getMetrics(owner);
        
        String context = String.format(
            "Dados atuais do negócio: Faturamento Total: R$%.2f, Lucro Líquido Total: R$%.2f, Produtos Cadastrados: %d, Clientes: %d.",
            metrics.totalRevenue(), metrics.totalNetProfit(), metrics.productCount(), metrics.customerCount()
        );

        String prompt = "Você é o PrecificaPro, um assistente financeiro especialista em pequenos negócios. " +
                        "Seja conciso, amigável e direto. Use os dados fornecidos para basear sua resposta. " +
                        "Contexto do negócio: " + context + " Pergunta do usuário: '" + question + "'";

        var requestBody = Map.of(
            "contents", List.of(
                Map.of("parts", List.of(Map.of("text", prompt)))
            )
        );
        
        Map responseMap = this.webClient.post()
                .uri(uriBuilder -> uriBuilder
                        // 2. Usamos a URL do seu exemplo que funcionou
                        .path("/v1beta/models/gemini-1.5-flash-latest:generateContent")
                        // 3. Passamos a chave como parâmetro, igual ao seu exemplo
                        .queryParam("key", this.geminiApiKey)
                        .build())
                // 4. Removemos o header "Authorization" que estava causando o erro 401
                .bodyValue(requestBody)
                .retrieve()
                .bodyToMono(Map.class)
                .block();

        try {
            List<Map> candidates = (List<Map>) responseMap.get("candidates");
            if (candidates == null || candidates.isEmpty()) {
                return "A IA não conseguiu gerar uma resposta, possivelmente devido a filtros de segurança. Tente reformular sua pergunta.";
            }
            Map content = (Map) candidates.get(0).get("content");
            List<Map> parts = (List<Map>) content.get("parts");
            return (String) parts.get(0).get("text");
        } catch (Exception e) {
            System.err.println("Erro ao processar resposta do Gemini: " + responseMap);
            return "Desculpe, não consegui processar a resposta da IA.";
        }
    }
}