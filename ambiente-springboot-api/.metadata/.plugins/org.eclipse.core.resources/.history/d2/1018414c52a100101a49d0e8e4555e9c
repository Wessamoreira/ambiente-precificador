package com.precificapro.service;

import com.precificapro.controller.dto.SimulationRequestDTO;
import com.precificapro.controller.dto.SimulationResponseDTO;
import com.precificapro.domain.model.*;
import com.precificapro.domain.repository.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.math.BigDecimal;
import java.math.MathContext;
import java.math.RoundingMode;

@Service
public class PricingSimulationService {

    @Autowired private ProductRepository productRepository;
    @Autowired private PricingProfileRepository profileRepository;
    @Autowired private CostItemRepository costItemRepository;
    @Autowired private FreightBatchRepository freightBatchRepository;
    
    private static final MathContext MC = new MathContext(10, RoundingMode.HALF_UP);

    @Transactional(readOnly = true)
    public SimulationResponseDTO simulate(SimulationRequestDTO request, User owner) {
        
        // 1. CARREGAR DADOS COM SEGURANÇA
        Product product = productRepository.findByIdAndOwner(request.productId(), owner)
                .orElseThrow(() -> new RuntimeException("Produto não encontrado."));
        PricingProfile profile = profileRepository.findByIdAndOwner(request.profileId(), owner)
                .orElseThrow(() -> new RuntimeException("Perfil de precificação não encontrado."));

        // 2. APLICAR OVERRIDES (se existirem)
        SimulationRequestDTO.OverrideDTO override = request.override();
        BigDecimal purchaseCost = override != null && override.purchaseCost() != null ? override.purchaseCost() : product.getDefaultPurchaseCost();
        // ... faça o mesmo para packagingCost, otherVariableCost, fees, etc.
        int salesTarget = override != null && override.monthlySalesTarget() != null ? override.monthlySalesTarget() : profile.getMonthlySalesTarget();

        // 3. CALCULAR CUSTO DIRETO UNITÁRIO
        // Lógica para buscar o frete (ex: pegar o último lote cadastrado)
        BigDecimal freightCost = freightBatchRepository.findFirstByProductOrderByCreatedAtDesc(product)
                .map(batch -> batch.getFreightTotal().divide(BigDecimal.valueOf(batch.getBatchSize()), MC))
                .orElse(BigDecimal.ZERO);
        
        BigDecimal directCost = purchaseCost.add(product.getDefaultPackagingCost()).add(product.getDefaultOtherVariableCost()).add(freightCost);
        
        // 4. CALCULAR CUSTO INDIRETO UNITÁRIO (RATEIO)
        BigDecimal totalFixedCosts = costItemRepository.findByOwnerAndActiveTrue(owner)
                .stream()
                .map(CostItem::getAmountMonthly)
                .reduce(BigDecimal.ZERO, BigDecimal::add);
        
        BigDecimal indirectCost = totalFixedCosts.divide(BigDecimal.valueOf(salesTarget), MC);

        // 5. CALCULAR CUSTO TOTAL
        BigDecimal totalCost = directCost.add(indirectCost);

        // 6. CALCULAR PREÇO DE VENDA (ANTES DO ARREDONDAMENTO)
        BigDecimal totalFeesPct = profile.getMachineFeePct().add(profile.getMarketplaceFeePct()); // Adicione os overrides aqui
        BigDecimal price;
        if (profile.getMethod() == com.precificapro.domain.enums.PricingMethod.MARKUP) {
            // P = CustoTotal * (1 + Markup) / (1 - Taxas)
            price = totalCost.multiply(BigDecimal.ONE.add(profile.getMarkup())).divide(BigDecimal.ONE.subtract(totalFeesPct), MC);
        } else { // MARGIN
            // P = CustoTotal / (1 - Taxas - Margem)
            price = totalCost.divide(BigDecimal.ONE.subtract(totalFeesPct).subtract(profile.getMarginOnPrice()), MC);
        }
        
        // 7. APLICAR ARREDONDAMENTO
        // Implementar a lógica para RoundingRule aqui (ex: UP_TO_0_90)
        BigDecimal suggestedPrice = price; // Placeholder

        // 8. CALCULAR MÉTRICAS FINAIS
        BigDecimal revenue = suggestedPrice.multiply(BigDecimal.valueOf(salesTarget));
        BigDecimal netProfit = revenue.subtract(totalCost.multiply(BigDecimal.valueOf(salesTarget))).subtract(revenue.multiply(totalFeesPct));
        // ... Calcule as outras métricas

        // 9. MONTAR E RETORNAR A RESPOSTA
        return new SimulationResponseDTO(/* preencha com os valores calculados */);
    }
}